import { Injectable } from '@angular/core';
export var PdfmakeService = (function () {
    function PdfmakeService() {
        this.pageSize = 'LETTER';
        this.pageOrientation = 'portrait';
        this.base64textString = '';
        this.docDefinition = {
            pageSize: this.pageSize,
            pageOrientation: this.pageOrientation,
            content: [],
            styles: {}
        };
    }
    PdfmakeService.prototype.open = function () {
        pdfMake.createPdf(this.docDefinition).open();
    };
    PdfmakeService.prototype.print = function () {
        pdfMake.createPdf(this.docDefinition).print();
    };
    PdfmakeService.prototype.download = function (name) {
        pdfMake.createPdf(this.docDefinition).download(name);
    };
    PdfmakeService.prototype.configureStyles = function (styles) {
        this.docDefinition.styles = styles;
    };
    PdfmakeService.prototype.addText = function (text, style) {
        if (style) {
            this.docDefinition.content.push({ text: text, style: style });
            return;
        }
        this.docDefinition.content.push(text);
    };
    PdfmakeService.prototype.addColumns = function (columnsText) {
        var columns = [];
        for (var _i = 0, columnsText_1 = columnsText; _i < columnsText_1.length; _i++) {
            var column = columnsText_1[_i];
            columns.push({ text: column });
        }
        this.docDefinition.content.push({ columns: columns });
    };
    PdfmakeService.prototype.addTable = function (table) {
        var body = [];
        var row = [];
        if (table) {
            for (var _i = 0, _a = table.headers.cells; _i < _a.length; _i++) {
                var header = _a[_i];
                row.push(header.content);
            }
            body.push(row);
            for (var _b = 0, _c = table.rows; _b < _c.length; _b++) {
                var rowObj = _c[_b];
                row = [];
                for (var _d = 0, _e = rowObj.cells; _d < _e.length; _d++) {
                    var cell = _e[_d];
                    row.push(cell.content);
                }
                body.push(row);
            }
            var tableDictionary = void 0;
            if (table.widths) {
                tableDictionary = {
                    table: {
                        widths: table.widths,
                        body: body
                    }
                };
            }
            else {
                tableDictionary = { table: { body: body } };
            }
            this.docDefinition.content.push(tableDictionary);
        }
    };
    PdfmakeService.prototype.addImage = function (url, width, height) {
        var _this = this;
        var data;
        var image = new Image();
        image.setAttribute('crossOrigin', 'anonymous');
        image.src = url;
        image.onload = function () {
            var canvas = document.createElement('canvas');
            canvas.width = image.naturalWidth;
            canvas.height = image.naturalHeight;
            canvas.getContext('2d').drawImage(image, 0, 0);
            data = canvas.toDataURL('image/png');
            var dict;
            if (width) {
                if (height) {
                    dict = { image: data, width: width, height: height };
                }
                else {
                    dict = { image: data, width: width };
                }
            }
            else {
                dict = { image: data };
            }
            _this.docDefinition.content.push(dict);
        };
    };
    PdfmakeService.prototype.addUnorderedlist = function (items) {
        this.docDefinition.content.push({ ul: items });
    };
    PdfmakeService.prototype.addOrderedList = function (items, reversed, start) {
        if (reversed) {
            this.docDefinition.content.push({ reversed: reversed, ol: items });
        }
        else if (reversed && start) {
            this.docDefinition.content.push({ reversed: reversed, start: start, ol: items });
        }
        else if (start) {
            this.docDefinition.content.push({ start: start, ol: items });
        }
        else {
            this.docDefinition.content.push({ ol: items });
        }
    };
    PdfmakeService.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    PdfmakeService.ctorParameters = function () { return []; };
    return PdfmakeService;
}());
//# sourceMappingURL=pdfmake.service.js.map